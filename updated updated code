#DB Importing necessary modules
import turtle
from turtle import *
import random 
from random import randrange
from freegames import square, vector
import types 

#WA Setting the parameters of the background and hiding the turtle cursor.
bgcolor('burlywood')       
setup(420,420,320,0)
hideturtle()
tracer(False)

#JM Setting up the objects in the game
food = vector(0,0)
worm = [vector(10,0)]
aim = vector(0,-10)
double_food = vector(30,30)
poison_food = vector(60,60)
state = types.SimpleNamespace()
state.snake_length = 1 #Used to store the length of the snake during the game as a state

#JM Changes the direction of where the worm is heading
def change(x,y):
    aim.x = x
    aim.y = y

#WA Checks if the worm is within the boundaries of the game
def inside(head):
    return -200< head.x < 190 and -200 < head.y < 190

#JM Moves the snake
def move():
    head = worm[-1].copy()
    head.move(aim)
    
    #WA Checks if the worm has ran into itself, touched a boundary, or ate the poisonous food
    if head in worm or not inside(head) or head == poison_food:
        square(head.x, head.y, 9, 'red')
        update()
        return 

    #JM Adds to the length of the worm by adding to its head
    worm.append(head)
    
#DB Checks if the worm's head has eaten the food or the double food and adds to its length accordingly
    if head == food:
        state.snake_length += 1 #DB Adds 1 to the length of the worm
        print('Worm : ', str(state.snake_length)) #DB Prints the length of the worm in the console
        #DB Spans double food, poison food and food at ramdom within the given range
        food.x = random.randrange(-15,15)*10
        food.y = random.randrange(-15,15)*10
        double_food.x = random.randrange(-15,15)*10
        double_food.y = random.randrange(-15,15)*10
        poison_food.x = random.randrange(-15,15)*10
        poison_food.y = random.randrange(-15,15)*10



    elif head == double_food:
        state.snake_length += 2 #DB Adds 2 to the length of the worm
        print('Worm : ', str(state.snake_length)) #DB Prints the length of the worm in the console
        #DB Spans double food, poison food and food at ramdom within the given range
        food.x = random.randrange(-15,15)*10
        food.y = random.randrange(-15,15)*10
        double_food.x = random.randrange(-15,15)*10
        double_food.y = random.randrange(-15,15)*10
        poison_food.x = random.randrange(-15,15)*10
        poison_food.y = random.randrange(-15,15)*10
        
    #JM If the worm runs into itself, runs into a boundary, or eats the poison food its head is removed 
    else:
        worm.pop(0)
        
    clear()
    
    #WA Determines the dimension and colour of the worm
    for body in worm:
        square(body.x, body.y, 9, 'coral2')
        
    #JM Defines the dimension and colour of the food, double food, and poison food  
    square(food.x, food.y, 9, 'DarkRed')
    square(double_food.x, double_food.y, 9, 'DarkRed')
    square(poison_food.x, poison_food.y, 9, 'DarkRed')
    update() #Results in the game updating
    ontimer(move,100) #Function that calls the move function to be called after 100 milliseconds

#DB These functions take into account which keys you press and change the direction of where the worm is heading
listen()
onkey(lambda : change(10,0), 'Right')
onkey(lambda : change(-10,0), 'Left')
onkey(lambda : change(0,10), 'Up')
onkey(lambda : change(0,-10), 'Down')

#WA These functions start the loop of the game
move()
done()
